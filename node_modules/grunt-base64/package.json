{
  "name": "grunt-base64",
  "description": "Base64 encode files.",
  "version": "0.1.0",
  "homepage": "https://github.com/BrightcoveOS/grunt-base64",
  "author": {
    "name": "David LaPalomento",
    "email": "dlapalomento@brightcove.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/BrightcoveOS/grunt-base64.git"
  },
  "bugs": {
    "url": "https://github.com/BrightcoveOS/grunt-base64/issues"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "https://github.com/BrightcoveOS/grunt-base64/blob/master/LICENSE.md"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-base64\n\n> A grunt task to base 64 encode files.\n\nThere are a number of good grunt plugins that do slightly more interesting things with base64 encoding like replace image URLs in your stylesheets with data URIs ([grunt-image-embed](https://github.com/ehynds/grunt-image-embed), for instance). This task just wraps node.js's native base64 encoding capabilities into a grunt task; it's up to you to find something interesting to do with the output.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-base64 --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-base64');\n```\n\n## The \"base64\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `base64` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  base64: {\n    your_target: {\n      // Target-specific file lists and/or options go here.\n      files: {\n        'output.b64': 'input.binary'\n      }\n    },\n  },\n})\n```\n\n### Options\nThe base64 task does not take any options beyond which specifying source and destination files.\n\n### Usage Examples\nThe base64 task takes a standard files configuration and transforms input files into base64-encoded outputs. It can optionally concatenate multiple inputs together:\n\n```js\ngrunt.initConfig({\n  base64: {\n    files: {\n      'dest/testing123.b64': ['src/testing', 'src/123'],\n    },\n  },\n})\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n0.1.0: Initial release\n",
  "readmeFilename": "README.md",
  "_id": "grunt-base64@0.1.0",
  "_shasum": "7a67bf25959111d819ab99d449b8be1c041ba97e",
  "_from": "grunt-base64@",
  "_resolved": "https://registry.npmjs.org/grunt-base64/-/grunt-base64-0.1.0.tgz"
}
